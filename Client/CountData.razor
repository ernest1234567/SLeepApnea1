@page "/BPMdata/"
@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@using Radzen
@inject IJSRuntime JSRuntime
@using Radzen.Blazor
@using System.Globalization
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Drawing;
@using Syncfusion.Pdf.Graphics;
@using System.IO;


<h3>CountData</h3>
<h4>Choose date:</h4>
<input class="form-control" type="date" format-value="yyyy-mm-dd" @bind="@inputValue" />
<br>
<button class="btn btn-primary" @onclick="@ExportToPdf">Export to PDF</button>
<button class="btn btn-primary" @onclick="@Print">Print Graph PDF</button>
@*<button class="btn btn-primary">
			<a href="/hospital.jpg" download="data.jpg" target="_top" >
				download
			</a>
	</button>*@
@if (vitaldatas == null)
{
	<div class="alert alert-info">Loading VitalDatas...</div>
}
else
{
	<table class="table table-responsive" id="rolessTable">
		<thead>
			<tr>
				<th>Date</th>
				<th>Count 96-100</th>
				<th>Count 91-95</th>
				<th>Count 86-90</th>
				<th>Count 81-85</th>
				<th>Count 76-80</th>
				<th>Count 71-75</th>
				<th>Count 66-70</th>
				<th>Count 61-65</th>
				<th>Count 56-60</th>
				<th>Count 51-55</th>
				<th>Count 46-50</th>
				<th>Count 41-45</th>
				<th>Count 36-40</th>
				<th>Count 31-35</th>
				<th>Count 26-30</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var vitaldata in vitaldatas)
			{
				@if (inputValue.ToString("yyyy-MM-dd") == vitaldata.Date)
				//if (vitaldata.Date == date
				{
					<tr>
						@if (vitaldata.BPM <= 100 && vitaldata.BPM > 95)
						{
							BPMCount100++;
						}
						@if (vitaldata.BPM <= 95 && vitaldata.BPM > 90)
						{
							BPMCount95++;
						}
						@if (vitaldata.BPM <= 90 && vitaldata.BPM > 85)
						{
							BPMCount90++;
						}
						@if (vitaldata.BPM <= 85 && vitaldata.BPM > 80)
						{
							BPMCount85++;
						}
						@if (vitaldata.BPM <= 80 && vitaldata.BPM > 75)
						{
							BPMCount80++;
						}
						@if (vitaldata.BPM <= 75 && vitaldata.BPM > 70)
						{
							BPMCount75++;
						}
						@if (vitaldata.BPM <= 70 && vitaldata.BPM > 65)
						{
							BPMCount70++;
						}
						@if (vitaldata.BPM <= 65 && vitaldata.BPM > 60)
						{
							BPMCount65++;
						}
						@if (vitaldata.BPM <= 60 && vitaldata.BPM > 55)
						{
							BPMCount60++;
						}
						@if (vitaldata.BPM <= 55 && vitaldata.BPM > 50)
						{
							BPMCount55++;
						}
						@if (vitaldata.BPM <= 50 && vitaldata.BPM > 45)
						{
							BPMCount50++;
						}
						@if (vitaldata.BPM <= 45 && vitaldata.BPM > 40)
						{
							BPMCount45++;
						}
						@if (vitaldata.BPM <= 40 && vitaldata.BPM > 35)
						{
							BPMCount40++;
						}
						@if (vitaldata.BPM <= 35 && vitaldata.BPM > 30)
						{
							BPMCount35++;
						}
						@if (vitaldata.BPM <= 30 && vitaldata.BPM > 25)
						{
							BPMCount30++;
						}
					</tr>
				}
				BPMCounts100 = BPMCount100;
				BPMCounts95 = BPMCount95;
				BPMCounts90 = BPMCount90;
				BPMCounts85 = BPMCount85;
				BPMCounts80 = BPMCount80;
				BPMCounts75 = BPMCount75;
				BPMCounts70 = BPMCount70;
				BPMCounts65 = BPMCount65;
				BPMCounts60 = BPMCount60;
				BPMCounts55 = BPMCount55;
				BPMCounts50 = BPMCount50;
				BPMCounts45 = BPMCount45;
				BPMCounts40 = BPMCount40;
				BPMCounts35 = BPMCount35;
				BPMCounts30 = BPMCount30;
			}
		<td>@inputValue.ToString("yyyy-MM-dd")</td>
		<td>@BPMCounts100</td>
		<td>@BPMCounts95</td>
		<td>@BPMCounts90</td>
		<td>@BPMCounts85</td>
		<td>@BPMCounts80</td>
		<td>@BPMCounts75</td>
		<td>@BPMCounts70</td>
		<td>@BPMCounts65</td>
		<td>@BPMCounts60</td>
		<td>@BPMCounts55</td>
		<td>@BPMCounts50</td>
		<td>@BPMCounts45</td>
		<td>@BPMCounts40</td>
		<td>@BPMCounts35</td>
		<td>@BPMCounts30</td>
		</tbody>
	</table>
	<h1>Report</h1>
	<button class="btn btn-primary" @onclick="@OnClick">Load</button>
	<div class="container">
		<div class="row">
			<div class="col-sm-12 my-5">
				<Radzen.Blazor.RadzenChart @ref="@myChart" >
					<Radzen.Blazor.RadzenBarSeries Data="@BPMs" CategoryProperty="BPM" Title="BPMCount" ValueProperty="BPMCount" />
					@*<RadzenValueAxis Formatter="@FormatAsUSD">*@
					<!--<RadzenGridLines Visible="true" />
					<RadzenAxisTitle Text="Revenue in USD" />
					</RadzenValueAxis>-->
					<Radzen.Blazor.RadzenBarOptions Radius="5" />
					@*<RadzenButton Click="@OnClick" Text="Refresh" />*@
				</Radzen.Blazor.RadzenChart>
			</div>
		</div>
	</div>
	@*<Radzen.Blazor.RadzenChart>
				<Radzen.Blazor.RadzenLineSeries  Data="@vitaldatas" CategoryProperty="Time" Title="BPM" ValueProperty="BPM">
					<Radzen.Blazor.RadzenMarkers MarkerType="Radzen.Blazor.MarkerType.Circle" />
				</Radzen.Blazor.RadzenLineSeries>
				<Radzen.Blazor.RadzenCategoryAxis Step="80" Padding="20" FormatString="{0:MMM}" />
		</Radzen.Blazor.RadzenChart>*@
	BPMCount100 = 0;
	BPMCount95 = 0;
	BPMCount90 = 0;
	BPMCount85 = 0;
	BPMCount80 = 0;
	BPMCount75 = 0;
	BPMCount70 = 0;
	BPMCount65 = 0;
	BPMCount60 = 0;
	BPMCount55 = 0;
	BPMCount50 = 0;
	BPMCount45 = 0;
	BPMCount40 = 0;
	BPMCount35 = 0;
	BPMCount30 = 0;

}

@code {
	RadzenChart myChart;
	int counting = 0;
	void OnClick()
	{
		if (counting == 0)
		{
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM96-100", BPMCount = BPMCounts100 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM91-95", BPMCount = BPMCounts95 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM86-90", BPMCount = BPMCounts90 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM81-85", BPMCount = BPMCounts85 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM76-80", BPMCount = BPMCounts80 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM71-75", BPMCount = BPMCounts75 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM66-70", BPMCount = BPMCounts70 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM61-65", BPMCount = BPMCounts65 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM56-60", BPMCount = BPMCounts60 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM51-55", BPMCount = BPMCounts55 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM46-50", BPMCount = BPMCounts50 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM41-45", BPMCount = BPMCounts45 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM36-40", BPMCount = BPMCounts40 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM31-35", BPMCount = BPMCounts35 });
			BPMs.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), BPM = "BPM26-30", BPMCount = BPMCounts30 });
			counting++;
			myChart.Reload();
		}
		else
		{
			BPMs.Clear();
			counting = 0;
		}
	}
	class DataItem
	{
		public string Date { get; set; }
		public string BPM { get; set; }
		public int BPMCount { get; set; }
	}
	List<DataItem> BPMs = new List<DataItem>();
	//{
	//	new DataItem
	//	{
	//		BPM = "BPM100",
	//		BPMCount = BPMCounts100
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM95",
	//		BPMCount = BPMCounts95
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM90",
	//		BPMCount = BPMCounts90
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM85",
	//		BPMCount = BPMCounts85
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM80",
	//		BPMCount = BPMCounts80
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM75",
	//		BPMCount = BPMCounts75
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM70",
	//		BPMCount = BPMCounts70
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM65",
	//		BPMCount = BPMCounts65
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM60",
	//		BPMCount = BPMCounts60
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM55",
	//		BPMCount = BPMCounts55
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM50",
	//		BPMCount = BPMCounts50
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM45",
	//		BPMCount = BPMCounts45
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM40",
	//		BPMCount = BPMCounts40
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM35",
	//		BPMCount = BPMCounts35
	//	},
	//	new DataItem
	//	{
	//		BPM = "BPM30",
	//		BPMCount = BPMCounts30
	//	},

	//										};
	public static int BPMCounts100;
	public static int BPMCounts95;
	public static int BPMCounts90;
	public static int BPMCounts85;
	public static int BPMCounts80;
	public static int BPMCounts75;
	public static int BPMCounts70;
	public static int BPMCounts65;
	public static int BPMCounts60;
	public static int BPMCounts55;
	public static int BPMCounts50;
	public static int BPMCounts45;
	public static int BPMCounts40;
	public static int BPMCounts35;
	public static int BPMCounts30;
	public static int BPMCount100 = 0;
	public static int BPMCount95 = 0;
	public static int BPMCount90 = 0;
	public static int BPMCount85 = 0;
	public static int BPMCount80 = 0;
	public static int BPMCount75 = 0;
	public static int BPMCount70 = 0;
	public static int BPMCount65 = 0;
	public static int BPMCount60 = 0;
	public static int BPMCount55 = 0;
	public static int BPMCount50 = 0;
	public static int BPMCount45 = 0;
	public static int BPMCount40 = 0;
	public static int BPMCount35 = 0;
	public static int BPMCount30 = 0;
	private List<VitalData> vitaldatas;
	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		vitaldatas = await _client.GetFromJsonAsync<List<VitalData>>("api/VitalDatas");
	}
	private DateTime inputValue { get; set; }
	private void OnInputValue(ChangeEventArgs changeEvent)
	{
		inputValue = (DateTime)changeEvent.Value;
	}
	void ExportToPdf()
	{
		int paragraphAfterSpacing = 8;
		int cellMargin = 8;
		PdfDocument pdfDocument = new PdfDocument();
		//Add Page to the PDF document.
		PdfPage page = pdfDocument.Pages.Add();

		//Create a new font.
		PdfStandardFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 16);

		//Create a text element to draw a text in PDF page.
		PdfTextElement title = new PdfTextElement("BPM", font, PdfBrushes.Black);
		PdfLayoutResult result = title.Draw(page, new PointF(0, 0));


		PdfStandardFont contentFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
		PdfTextElement content = new PdfTextElement("This component demonstrates fetching data from a client side and Exporting the data to PDF document using Syncfusion .NET PDF library.", contentFont, PdfBrushes.Black);
		PdfLayoutFormat format = new PdfLayoutFormat();
		format.Layout = PdfLayoutType.Paginate;

		//Draw a text to the PDF document.
		result = content.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);

		//Create a PdfGrid.
		PdfGrid pdfGrid = new PdfGrid();
		pdfGrid.Style.CellPadding.Left = cellMargin;
		pdfGrid.Style.CellPadding.Right = cellMargin;

		//Applying built-in style to the PDF grid
		pdfGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);

		//Assign data source.
		pdfGrid.DataSource = BPMs;

		pdfGrid.Style.Font = contentFont;

		//Draw PDF grid into the PDF page.
		pdfGrid.Draw(page, new Syncfusion.Drawing.PointF(0, result.Bounds.Bottom + paragraphAfterSpacing));

		MemoryStream memoryStream = new MemoryStream();

		// Save the PDF document.
		pdfDocument.Save(memoryStream);

		// Download the PDF document
		JSRuntime.SaveAs("Sample.pdf", memoryStream.ToArray());

	}
	private async Task Print()
	{
		await JSRuntime.InvokeVoidAsync("printInvoke");
	}
}
