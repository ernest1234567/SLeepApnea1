@page "/vitalDatas/"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Drawing;
@using Syncfusion.Pdf.Graphics;
@using System.IO;


<h3 class="card-title">VitalDatas</h3>
<br />
<h4>Choose date:</h4>
<input class="form-control" type="date" format-value="yyyy-mm-dd" @bind="@inputValues" />
<br>
<h5>Choose Patient:</h5>
<select class="form-control" @bind="@inputValue">
	<option value="">-- Select Patient --</option>
	@if (patients != null)
	{
		foreach (var patient in patients)
		{
			<option value="@patient.ID">@patient.Name</option>
		}
	}
</select>
<br>
<button class="btn btn-primary" @onclick="@ExportToPdf">Export to PDF</button>
<button class="btn btn-primary" @onclick="@Print">Print Graph PDF</button>
@*<a href="/vitalDatas/create" class="btn btn-secondary">
		<span class="oi oi-plus"></span>
		Create New VitalData
	</a>*@
@*<br />
	<br />*@



@if (vitaldatas == null)
{
	<div class="alert alert-info">Loading VitalDatas...</div>
}
else
{
	<table class="table table-responsive" id="vitaldatasTable">
		<thead>
			<tr>
				<th>Name</th>
				<th>BPM</th>
				<th>SPO2</th>
				<th>Movement</th>
				<th>Date</th>
				<th>Time</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var vitaldata in vitaldatas)
			{
				<tr>
					@foreach (var patient in patients)
					{
						@if (inputValue == vitaldata.PatientID.ToString() && inputValues.ToString("yyyy-MM-dd") == vitaldata.Date && vitaldata.PatientID == patient.ID)
						{
							<td>@patient.Name</td>
							<td>@vitaldata.BPM</td>
							<td>@vitaldata.SpO2</td>
							<td>@vitaldata.Movement</td>
							<td>@vitaldata.Date</td>
							<td>@vitaldata.Time</td>
						}
					}
					@*<td>@vitaldata.BPM</td>
						<td>@vitaldata.SpO2</td>
						<td>@vitaldata.Movement</td>
						<td>@vitaldata.Date</td>
						<td>@vitaldata.Time</td>*@
				</tr>
			}
		</tbody>
	</table>
}


@code
{
	private List<VitalData> vitaldatas;
	private List<Patient> patients;
	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		vitaldatas = await _client.GetFromJsonAsync<List<VitalData>>("api/VitalDatas");
		patients = await _client.GetFromJsonAsync<List<Patient>>("api/Patients");
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#vitaldatasTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#vitaldatasTable");
	}
	async Task Delete(int vitaldataId)
	{
		var vitaldata = vitaldatas.First(q => q.ID == vitaldataId);
		var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {vitaldata.ID}?");
		if (confirm)
		{
			await _client.DeleteAsync($"api/roles/{vitaldataId}");
			await OnInitializedAsync();
		}
	}
	[Parameter] public VitalData vitalData { get; set; }
	[Parameter] public Patient PatientSS { get; set; }
	private DateTime inputValues { get; set; }
	private void OnInputValues(ChangeEventArgs changeEvent)
	{
		inputValues = (DateTime)changeEvent.Value;
	}
	private string inputValue { get; set; }
	private void OnInputValue(ChangeEventArgs changeEvent)
	{
		inputValue = (string)changeEvent.Value;
	}
	void ExportToPdf()
	{
		int paragraphAfterSpacing = 8;
		int cellMargin = 8;
		PdfDocument pdfDocument = new PdfDocument();
		//Add Page to the PDF document.
		PdfPage page = pdfDocument.Pages.Add();

		//Create a new font.
		PdfStandardFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 16);

		//Create a text element to draw a text in PDF page.
		PdfTextElement title = new PdfTextElement("VitalData", font, PdfBrushes.Black);
		PdfLayoutResult result = title.Draw(page, new PointF(0, 0));


		PdfStandardFont contentFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
		PdfTextElement content = new PdfTextElement("This component demonstrates fetching data from a client side and Exporting the data to PDF document using Syncfusion .NET PDF library.", contentFont, PdfBrushes.Black);
		PdfLayoutFormat format = new PdfLayoutFormat();
		format.Layout = PdfLayoutType.Paginate;

		//Draw a text to the PDF document.
		result = content.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);

		//Create a PdfGrid.
		PdfGrid pdfGrid = new PdfGrid();
		pdfGrid.Style.CellPadding.Left = cellMargin;
		pdfGrid.Style.CellPadding.Right = cellMargin;

		//Applying built-in style to the PDF grid
		pdfGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);

		//Assign data source.
		pdfGrid.DataSource = vitaldatas;

		pdfGrid.Style.Font = contentFont;

		//Draw PDF grid into the PDF page.
		pdfGrid.Draw(page, new Syncfusion.Drawing.PointF(0, result.Bounds.Bottom + paragraphAfterSpacing));

		MemoryStream memoryStream = new MemoryStream();

		// Save the PDF document.
		pdfDocument.Save(memoryStream);

		// Download the PDF document
		js.SaveAs("Sample.pdf", memoryStream.ToArray());

	}
	private async Task Print()
	{
		await js.InvokeVoidAsync("printInvoke");
	}
}
