@page "/vitalDatas/"
@using Microsoft.AspNetCore.Authorization
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]


<h3 class="card-title">VitalDatas</h3>
<br />

@*<a href="/vitalDatas/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New VitalData
</a>*@
@*<br />
<br />*@



@if (vitaldatas == null)
{
	<div class="alert alert-info">Loading VitalDatas...</div> 
}
else
{
	<table class="table table-responsive" id="rolessTable">
		<thead>
			<tr>
				<th>BPM</th>
				<th>SPO2</th>
				<th>Movement</th>
				<th>Date</th>
				<th>Time</th>
				<th>Count</th>
			</tr>
		</thead>
		<tbody>
		@foreach (var vitaldata in vitaldatas)
		{
			<tr>
				<td>@vitaldata.BPM</td>
				<td>@vitaldata.SpO2</td>
				<td>@vitaldata.Movement</td>
				<td>@vitaldata.Date</td>
				<td>@vitaldata.Time</td>		
		</tr>
		}
	</tbody>
</table>
}


@code 
{
	private List<VitalData> vitaldatas;
	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		vitaldatas = await _client.GetFromJsonAsync<List<VitalData>>("api/VitalDatas");
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#vitaldatasTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#vitaldatasTable");
	}
	async Task Delete(int vitaldataId)
	{
		var vitaldata = vitaldatas.First(q => q.ID == vitaldataId);
		var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {vitaldata.ID}?");
		if (confirm)
		{
			await _client.DeleteAsync($"api/roles/{vitaldataId}");
			await OnInitializedAsync();
		}
	}
	[Parameter] public VitalData vitalData { get; set; }
}