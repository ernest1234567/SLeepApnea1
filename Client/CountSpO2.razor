@page "/SpO2data/"
@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@using Radzen
@inject IJSRuntime JSRuntime
@using Radzen.Blazor
@using System.Globalization
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Grid;
@using Syncfusion.Drawing;
@using Syncfusion.Pdf.Graphics;
@using System.IO;

<h3>CountData</h3>
<h4>Choose date:</h4>

<input class="form-control" type="date" format-value="yyyy-mm-dd" @bind="@inputValue" />
<br>
<h5>Choose Patient:</h5>
<select class="form-control" @bind="@inputValues">
	<option value="">-- Select Patient --</option>
	@if (patients != null)
	{
		foreach (var patient in patients)
		{
			<option value="@patient.ID">@patient.Name</option>
		}
	}
</select>
<br>
<button class="btn btn-primary" @onclick="@ExportToPdf">Export to PDF</button>
<button class="btn btn-primary" @onclick="@Print">Print Graph PDF</button>

@if (vitaldatas == null)
{
	<div class="alert alert-info">Loading VitalDatas...</div>
}
else
{
	<table class="table table-responsive" id="rolessTable">
		<thead>
			<tr>
				<th>Date</th>
				<th>Count 100</th>
				<th>Count 99</th>
				<th>Count 98</th>
				<th>Count 97</th>
				<th>Count 96</th>
				<th>Count 95</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var vitaldata in vitaldatas)
			{
				@if (inputValue.ToString("yyyy-MM-dd") == vitaldata.Date && inputValues == vitaldata.PatientID.ToString())
				//if (vitaldata.Date == date
				{
					<tr>
						@if (vitaldata.SpO2 == 100)
						{
							SpO2Count100++;
						}
						@if (vitaldata.SpO2 == 99)
						{
							SpO2Count99++;
						}
						@if (vitaldata.SpO2 == 98)
						{
							SpO2Count98++;
						}
						@if (vitaldata.SpO2 == 97)
						{
							SpO2Count97++;
						}
						@if (vitaldata.SpO2 == 96)
						{
							SpO2Count96++;
						}
						@if (vitaldata.SpO2 == 95)
						{
							SpO2Count95++;
						}
					</tr>
				}
				SpO2Counts100 = SpO2Count100;
				SpO2Counts99 = SpO2Count99;
				SpO2Counts98 = SpO2Count98;
				SpO2Counts97 = SpO2Count97;
				SpO2Counts96 = SpO2Count96;
				SpO2Counts95 = SpO2Count95;
			}
		<td>@inputValue.ToString("yyyy-MM-dd")</td>
		<td>@SpO2Counts100</td>
		<td>@SpO2Counts99</td>
		<td>@SpO2Counts98</td>
		<td>@SpO2Counts97</td>
		<td>@SpO2Counts96</td>
		<td>@SpO2Counts95</td>
		</tbody>
	</table>
	SpO2Count100 = 0;
	SpO2Count99 = 0;
	SpO2Count98 = 0;
	SpO2Count97 = 0;
	SpO2Count96 = 0;
	SpO2Count95 = 0;
	<h1>Report</h1>
	<button class="btn btn-primary" @onclick="@Onclick">Load</button>
	<div class="container">
		<div class="row">
			<div class="col-sm-12 my-5">
				<Radzen.Blazor.RadzenChart @ref="@myChart">
					<Radzen.Blazor.RadzenBarSeries Data="@SpO2s" CategoryProperty="SpO2" Title="SpO2Count" ValueProperty="SpO2Count" />
					@*<RadzenValueAxis Formatter="@FormatAsUSD">*@
					<!--<RadzenGridLines Visible="true" />
					<RadzenAxisTitle Text="Revenue in USD" />
					</RadzenValueAxis>-->
					@*<RadzenCategoryAxis Step="80" Padding="20" FormatString="{0:MMM}">*@
					<Radzen.Blazor.RadzenBarOptions Radius="5" />
					<RadzenCategoryAxis FormatString="{0:hh/mm/ss}">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="SpO2 Range" />
                </RadzenCategoryAxis>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Count" />
                </RadzenValueAxis>
				</Radzen.Blazor.RadzenChart>
			</div>
		</div>
	</div>
}

@code {
	RadzenChart myChart;
	int counting = 0;
	void Onclick()
	{
		if (counting == 0)
		{
			SpO2s.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), SpO2 = "SpO2 100", SpO2Count = SpO2Counts100 });
			SpO2s.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), SpO2 = "SpO2 99", SpO2Count = SpO2Counts99 });
			SpO2s.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), SpO2 = "SpO2 98", SpO2Count = SpO2Counts98 });
			SpO2s.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), SpO2 = "SpO2 97", SpO2Count = SpO2Counts97 });
			SpO2s.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), SpO2 = "SpO2 96", SpO2Count = SpO2Counts96 });
			SpO2s.Add(new DataItem { Date = inputValue.ToString("yyyy-MM-dd"), SpO2 = "SpO2 95", SpO2Count = SpO2Counts95 });
			counting++;
			myChart.Reload();
		}
		else
		{
			SpO2s.Clear();
			counting = 0;
		}
	}
	class DataItem
	{
		public string Date { get; set; }
		public string SpO2 { get; set; }
		public int SpO2Count { get; set; }
	}
	List<DataItem> SpO2s = new List<DataItem>();
	//{
	//	new DataItem
	//	{
	//		SpO2 = "SpO2 100",
	//		SpO2Count = SpO2Counts100,
	//	},
	//	new DataItem
	//	{
	//		SpO2 = "SpO2 99",
	//		SpO2Count = SpO2Counts99,
	//	},
	//	new DataItem
	//	{
	//		SpO2 = "SpO2 98",
	//		SpO2Count = SpO2Counts98,
	//	},
	//	new DataItem
	//	{
	//		SpO2 = "SpO2 97",
	//		SpO2Count = SpO2Counts97,
	//	},
	//	new DataItem
	//	{
	//		SpO2 = "SpO2 96",
	//		SpO2Count = SpO2Counts96,
	//	},
	//	new DataItem
	//	{
	//		SpO2 = "SpO2 95",
	//		SpO2Count = SpO2Counts95,
	//	},

	//							};
	public static int SpO2Counts100;
	public static int SpO2Counts99;
	public static int SpO2Counts98;
	public static int SpO2Counts97;
	public static int SpO2Counts96;
	public static int SpO2Counts95;
	public static int SpO2Count100 = 0;
	public static int SpO2Count99 = 0;
	public static int SpO2Count98 = 0;
	public static int SpO2Count97 = 0;
	public static int SpO2Count96 = 0;
	public static int SpO2Count95 = 0;
	private List<VitalData> vitaldatas;
	private List<Patient> patients;
	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		vitaldatas = await _client.GetFromJsonAsync<List<VitalData>>("api/VitalDatas");
		patients = await _client.GetFromJsonAsync<List<Patient>>("api/Patients");
	}
	private DateTime inputValue { get; set; }
	private void OnInputValue(ChangeEventArgs changeEvent)
	{
		inputValue = (DateTime)changeEvent.Value;
	}
	private string inputValues { get; set; }
	private void OnInputValues(ChangeEventArgs changeEvent)
	{
		inputValues = (string)changeEvent.Value;
	}
	void ExportToPdf()
	{
		int paragraphAfterSpacing = 8;
		int cellMargin = 8;
		PdfDocument pdfDocument = new PdfDocument();
		//Add Page to the PDF document.
		PdfPage page = pdfDocument.Pages.Add();

		//Create a new font.
		PdfStandardFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 16);

		//Create a text element to draw a text in PDF page.
		PdfTextElement title = new PdfTextElement("SpO2", font, PdfBrushes.Black);
		PdfLayoutResult result = title.Draw(page, new PointF(0, 0));


		PdfStandardFont contentFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
		PdfTextElement content = new PdfTextElement("This component demonstrates fetching data from a client side and Exporting the data to PDF document using Syncfusion .NET PDF library.", contentFont, PdfBrushes.Black);
		PdfLayoutFormat format = new PdfLayoutFormat();
		format.Layout = PdfLayoutType.Paginate;

		//Draw a text to the PDF document.
		result = content.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);

		//Create a PdfGrid.
		PdfGrid pdfGrid = new PdfGrid();
		pdfGrid.Style.CellPadding.Left = cellMargin;
		pdfGrid.Style.CellPadding.Right = cellMargin;

		//Applying built-in style to the PDF grid
		pdfGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);

		//Assign data source.
		pdfGrid.DataSource = SpO2s;

		pdfGrid.Style.Font = contentFont;

		//Draw PDF grid into the PDF page.
		pdfGrid.Draw(page, new Syncfusion.Drawing.PointF(0, result.Bounds.Bottom + paragraphAfterSpacing));

		MemoryStream memoryStream = new MemoryStream();

		// Save the PDF document.
		pdfDocument.Save(memoryStream);

		// Download the PDF document
		JSRuntime.SaveAs("Sample.pdf", memoryStream.ToArray());

	}
	private async Task Print()
	{
		await JSRuntime.InvokeVoidAsync("printInvoke");
	}
}